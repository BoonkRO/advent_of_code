# --- Dia 1: Inverse Captcha - --
#
# El captcha requiere que revises una secuencia de digitos (la entrada de tu puzzle)
# y encuentres la suma de todos los digitos que coincidan con el siguiente digito de la lista.
# La lista es circular, asi que el digito de despues del ultimo es el primer digito de la lista.
#
# Por ejemplo:
#
# 1122 produce la suma de 3 (1 + 2) porque el primer digito (1)  coincide con el segundo digito
# y el tercer digito (2) coincide con el cuarto.
# 1111 produce 4 porque cada digito (todos 1) coinciden con el siguiente.
# 1234 produce 0 porque ninguno de los digito coincide con el siguiente.
# 91212129 produce 9 porque el unico digito que coincide con el siguiente es el ultimo (9).
#
#¿Cual es la solucion al captcha?
def inverseCaptcha(numbers):
    listNum = numbers
    sum = 0

    #Recorre la lista desde la primera a la última posición
    for numberInList in range(0, len(listNum)-1):
        if listNum[numberInList] == listNum[numberInList+1]:

            sum += int(listNum[numberInList])
    if listNum[0] == listNum[len(listNum)-1]:
        sum += int(listNum[0])

    return sum

#inverseCaptcha('1122')

if __name__ == "__main__":
    testCase = '1122'
    assert inverseCaptcha(testCase) == 3, 'Fallo test 1'
    testCase = '1111'
    assert inverseCaptcha(testCase) == 4, 'Fallo test 2'
    testCase = '1234'
    assert inverseCaptcha(testCase) == 0, 'Fallo test 3'
    testCase = '91212129'
    assert inverseCaptcha(testCase) == 9, 'Fallo test 4'

    print('Casos test básico pasados')

    #testCase2 = "3294199471327195994824832197564859876682638188889768298894243832665654681412886862234525991553276578641265589959178414218389329361496673991614673626344552179413995562266818138372393213966143124914469397692587251112663217862879233226763533911128893354536353213847122251463857894159819828724827969576432191847787772732881266875469721189331882228146576832921314638221317393256471998598117289632684663355273845983933845721713497811766995367795857965222183668765517454263354111134841334631345111596131682726196574763165187889337599583345634413436165539744188866156771585647718555182529936669683581662398618765391487164715724849894563314426959348119286955144439452731762666568741612153254469131724137699832984728937865956711925592628456617133695259554548719328229938621332325125972547181236812263887375866231118312954369432937359357266467383318326239572877314765121844831126178173988799765218913178825966268816476559792947359956859989228917136267178571776316345292573489873792149646548747995389669692188457724414468727192819919448275922166321158141365237545222633688372891451842434458527698774342111482498999383831492577615154591278719656798277377363284379468757998373193231795767644654155432692988651312845433511879457921638934877557575241394363721667237778962455961493559848522582413748218971212486373232795878362964873855994697149692824917183375545192119453587398199912564474614219929345185468661129966379693813498542474732198176496694746111576925715493967296487258237854152382365579876894391815759815373319159213475555251488754279888245492373595471189191353244684697662848376529881512529221627313527441221459672786923145165989611223372241149929436247374818467481641931872972582295425936998535194423916544367799522276914445231582272368388831834437562752119325286474352863554693373718848649568451797751926315617575295381964426843625282819524747119726872193569785611959896776143539915299968276374712996485367853494734376257511273443736433464496287219615697341973131715166768916149828396454638596713572963686159214116763"
    testCase = "9384274494683632359351641411374573466273164687337536769779487433749179185568461296233353611992672753778126935276769885424719553291616136172298883156626254151278852582397949697874462178536295341822137377563322815527592267791213115418635363174876132196234374887626324931371241841242873783493835919238421879116421481543826222278152238576762132577763214642569545298668935216911493462229629786978273548147171384321525952959196377728493632872618291183256888417779495124837828187298244786175872713299271766246696631257484453347125176233373232245382158656142179687576388951175953419286858673221138553912229576523123114871637487978775855777483921896568333282333137175739746234262744256254149233843517254613981476355147487975859685936527161737644929119345127273149762325158784595946931447738173246311763677997888425452294562823751136515271874725143582623717324394587398371298523368386595426714148717735345237657249712685895921433468949182235146698174393928288313985355769799485511749423552935992391624424575278333625476148888355716967628454862834463357834291788479677576561681171516128495737923155533438413156639155128831349894646317546536886319328573512622325789672115171618195548534941184939233914166432349321992879287349932819135919518955561456615989137221875483561599493342981595678961836562435436285673764213941758954489582656271121429555455368545289416981624961261963953364918377483776322142975937971552271642224933926326665557787586927667898255947116988278131974381388514274833852552695679713424836536348449273149415872522111522749448188993159814183411853994579147867385867619467777654943169814287928966652552129439822741856512265955664872454951159255617513136142717471774698224566543617595742753244142364438589729356939483387466363477224283477843889679221229344974441624448489853764111425798141258155246636844914711222931548722647298953744242682551562166463942694715631497895981643174194294826868561578586851326262619731272665397711381459745281218196515155917877694663186732599688912878149242688741584822831861748845817871681621697944472377688658368145698614861456518138376989688166921187224726942589996534179549171859786241718727295379"
    print(inverseCaptcha(testCase))